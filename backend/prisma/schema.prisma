generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Consultant
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  password     String
  role         Role     @default(USER)
  refreshToken String?
  createdAt    DateTime @default(now())
  reports      Report[]

  student        Student[]
  checklistItems ChecklistItem[]
}

model Student {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  phone            String?
  school           String?
  grade            String?
  allowLogin       Boolean  @default(true)
  canEditChecklist Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 연결 테이블
  checklistItems ChecklistItem[]
  todoItems      StudentToDo[]
  meeting        Meeting[]
  conversation   Conversation[]
  colleges       StudentCollege[]
  notes          StudentNote[]
  exams          Exam[]
  timelog        TimeLog[]
  contactinfo    ContactInfo?
}

model ChecklistItem {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  title       String
  isCompleted Boolean   @default(false)
  dueDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentToDo {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  text      String
  done      Boolean  @default(false)
  due       DateTime
  createdAt DateTime @default(now())
}

model Meeting {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  title     String
  startTime DateTime
  endTime   DateTime
  note      String?
  createdAt DateTime @default(now())
}

model Conversation {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  sender    String
  text      String
  createdAt DateTime @default(now())
}

model College {
  id       String @id
  name     String
  location String

  note       String?
  isFavorite Boolean @default(false)

  // 연결 테이블
  students StudentCollege[]
}

model StudentCollege {
  id        String  @id @default(cuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  college   College @relation(fields: [collegeId], references: [id])
  collegeId String

  status String // 예: Applied, Rejected, Accepted

  isSuggested Boolean  @default(false) // 추천 여부 플래그
  createdAt   DateTime @default(now())

  @@unique([studentId, collegeId]) // 중복방지
  @@map("StudentCollege")
}

model StudentNote {
  id        String  @id @default(cuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  content   String
  createdAt DateTime @default(now())
}

model Exam {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  type      String
  date      DateTime
  scores    Json
  createdAt DateTime @default(now())
}

model TimeLog {
  id        String  @id @default(cuid())
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String

  date        DateTime
  duration    Int // minutes (예: 90분 = 1시간 30분)
  description String
  billable    Boolean  @default(false)
  status      String // 'paid', 'unpaid', 'invoiced'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactInfo {
  id        String  @id @default(cuid())
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String  @unique

  email     String?
  phone     String?
  address   String?
  school    String?
  grade     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  type      String // 'checklist' | 'meeting' | 'note' | 'college' | 'email'
  title     String
  content   String // text 또는 JSON.stringify로 구조 저장
  summary   String?  // ✅ 텍스트 미리보기용
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  question  String
  answer    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
